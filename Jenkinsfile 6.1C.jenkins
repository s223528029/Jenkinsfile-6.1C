pipeline {

    agent any


    stages {
        stage('Build') {
            steps {
                echo "Build the code using Maven"
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo "Running tests using JUnit"
            }
        }
        stage('Code Analysis') {
            steps {
                echo "Analysing code using SonarQube"
            }
        }
        stage('Security Scan') {
            steps {
                echo "Perform security scan using Veracode"
            }
            post {
                success {
                    mail to: "jomedelte@gmail.com",
                         subject: "Security scan email",
                         body: "Scan was successful"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo "Deploy the application to staging server AWS EC2"
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo "Run integration tests on the staging environment"
            }
            post {
                success {
                    mail to: "jomedelte@gmail.com",
                         subject: "Test success email",
                         body: "Integration test was successful"
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploy application to production server  AWS EC2"
            }
            post {
                success {
                    script {
                        // Send email with the log as an attachment
                        def log = currentBuild.rawBuild.getLog(100).join('\n')
                        mail to: 'jomedelte@gmail.com',
                            subject: "Pipeline Success: ${currentBuild.fullDisplayName}",
                            body: "Pipeline success. Check Jenkins for more details.\n\nLog:\n${log}"
                }
            }
        }
    }
}
}
