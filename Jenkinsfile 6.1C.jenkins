pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo "Build the code using Maven"
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo "Running tests using JUnit"
            }
        }
        stage('Code Analysis') {
            steps {
                echo "Analysing code using SonarQube"
            }
        }
        stage('Security Scan') {
            steps {
                echo "Perform security scan using Veracode"
            }
            post {
                success {
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Security Scan Success",
                        body: "The security scan was successful."
                    )
                }
                failure {
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Security Scan Failure",
                        body: "The security scan failed."
                    )
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo "Deploy the application to staging server AWS EC2"
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo "Run integration tests on the staging environment"
            }
            post {
                success {
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Integration Tests Success",
                        body: "Integration tests on staging were successful."
                    )
                }
                failure {
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Integration Tests Failure",
                        body: "Integration tests on staging failed."
                    )
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                echo "Deploy application to production server AWS EC2"
            }
            post {
                success {
                    script {
                        // Save console log to a file
                        def logFile = "${env.WORKSPACE}/console.log"
                        writeFile file: logFile, text: currentBuild.rawBuild.getLog(1000).join("\n")
                    }

                    // Send email with log file as attachment
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Production Deploy Success - Build #${env.BUILD_NUMBER}",
                        body: "The production deployment was successful. Please find the build logs attached.",
                        attachLog: true,
                        attachmentsPattern: 'console.log'
                    )
                }
                failure {
                    mail(
                        to: "jomedelte@gmail.com",
                        subject: "Production Deploy Failure - Build #${env.BUILD_NUMBER}",
                        body: "The production deployment failed. Please review the logs.",
                        attachLog: true
                    )
                }
            }
        }
    }
}
